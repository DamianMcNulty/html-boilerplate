//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Extra tiny screens / tiny
// $screen-tiny-min:             	260px !default;
//
// // Tiny screen / phone
// $screen-small-min:             	380px !default;
//
// // Small screen / tablet
// $screen-middle-min:             580px !default;	// picture-scaling: 580/320 =  1.9
//
// // Medium screen / desktop
// $screen-normal-min:             880px !default;	// picture-scaling: 880/680 = 1.3
//
// // Large screen / wide
// $screen-big-min:             	1200px !default; // picture-scaling: 1200/1024 = 1.2
//
// // Large screen / extra-wide
// $screen-huge-min:             	1500px !default; // picture-scaling: 1600/1440 = 1.2
//
// // Maximale ausdehnung der Layout-Komponenten, in _grid.scss entfernen, wenn nicht gew√ºnscht.
// //$screen-max: 1200px;
//
// // So media queries don't overlap when required, provide a maximum
// //$screen-tiny-max:              	($screen-small-min - 1) !default;
// $screen-small-max:              ($screen-middle-min - 1) !default;
// $screen-middle-max:             ($screen-normal-min - 1) !default;
// $screen-normal-max:             ($screen-big-min - 1) !default;
// //$screen-big-max:              	($screen-huge-min - 1) !default;



//== Translate Names
// translates the breakpoint names in more logic names

// $tiny:    	"tiny";
// $phone:   	"small";
// $tablet:  	"middle";
// $desktop: 	"normal";
// $wide:    	"big";
// $hd:      	"huge"; // not in use ...


//== Media queries breakpoints
// To enable support for browsers that do not support @media queries,
// (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false
// Create a separate stylesheet served exclusively to these browsers,
// meaning @media queries will be rasterized, relying on the cascade itself
$mq-responsive: true;

// Name your breakpoints in a way that creates a ubiquitous language
// across team members. It will improve communication between
// stakeholders, designers, developers, and testers.
$mq-breakpoints: (
    mobile: 380px, // 2x
    tablet: 580px, // 1.4x
    desktop: 880px, // 1.4x
    wide: 1160px // 1.4x
    // Tweakpoints
    // desktopAd: 810px,
    // mobileLandscape: 480px
);

// Define the breakpoint from the $mq-breakpoints list that should
// be used as the target width when outputting a static stylesheet
// (i.e. when $mq-responsive is set to 'false').
$mq-static-breakpoint: desktop;

// If you want to display the currently active breakpoint in the top
// right corner of your site during development, add the breakpoints
// to this list, ordered by width, e.g. (mobile, tablet, desktop).
// $mq-show-breakpoints: (mobile, tablet, desktop, wide);






//== Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
$grid-columns: 12 !default;
//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width: 20px !default;

//** use it within your code - it is applied to .box class and box mixin
$max-grid-width: 1200px;


//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
//** For `$screen-sm-min` and up.
$container-tablet:  ((720px + $grid-gutter-width)) !default;

// Medium screen / desktop
//** For `$screen-md-min` and up.
$container-desktop: ((940px + $grid-gutter-width)) !default;

// Large screen / wide desktop
//** For `$screen-lg-min` and up.
$container-wide:    ((1140px + $grid-gutter-width)) !default;




//== Fonts
//

//** font families
$ff-proxima:       'proxima-nova', helvetica, arial, sans-serif;
$ff-lexia:         'lexia', 'Times New Roman', serif;

//** font families for whom
$ff-first: 			$ff-proxima;
$ff-second: 		$ff-lexia;

//** font-sizes
$fs-normal:         em(16);
$fs-text: 		    em(16);
$fs-headline:	    em(18);
$fs-headline-big:	em(32);

//** font-weights
//$fw-thin: 			200;
//$fw-light: 			300;
$fw-regular: 		400;
$fw-medium: 		500;
$fw-semibold:       600;
$fw-bold: 			700;
$fw-x-bold: 		800;
//$fw-black:		900;

//** line-height
$lh-headline-big: 	.9;
$lh-headline: 		1.1;
$lh-normal: 		1.2;
$lh-text: 			1.5;


//== Colors
//
$c-black:			#383838;
$c-error: 			#D40F4C;


//== Font Colors
//
$fc-normal:			#383838;


//== Icons
$icon-size: 24px;
$icon-size-huge: 48px;
$icon-size-small: 18px;
$icon-size-tiny: 16px;


//== Linien
$line: 1px solid #ccc;


//== Shadows
$shadow-error: 	inset 0 0 10px rgba($c-error, 0.15);


//== Ease Functions
$linear: cubic-bezier(.25, .25, .75, .75); // http://easings.net/#linear
$ease: cubic-bezier(.25, .1, .25, 1); // http://easings.net/#ease
$ease-in: cubic-bezier(.42, 0, 1, 1); // http://easings.net/#ease
$ease-out: cubic-bezier(0, 0, .58, 1); // http://easings.net/#ease
$ease-in-out: cubic-bezier(.42, 0, .58, 1); // http://easings.net/#ease

$ease-in-quad: cubic-bezier(.55, .085, .68, .53); // http://easings.net/#easeInQuad
$ease-in-cubic: cubic-bezier(.55, .055, .675, .19); // http://easings.net/#easeInCubic
$ease-in-quart: cubic-bezier(.895, .03, .685, .22); // http://easings.net/#easeInQuart
$ease-in-quint: cubic-bezier(.755, .05, .855, .06); // http://easings.net/#easeInQuint
$ease-in-sine: cubic-bezier(.47, 0, .745, .715); // http://easings.net/#easeInSine
$ease-in-expo: cubic-bezier(.95, .05, .795, .035); // http://easings.net/#easeInExpo
$ease-in-circ: cubic-bezier(.6, .04, .98, .335); // http://easings.net/#easeInCirc
$ease-in-back: cubic-bezier(.6, -.28, .735, .045); // http://easings.net/#easeInBack

$ease-out-quad: cubic-bezier(.25, .46, .45, .94); // http://easings.net/#easeOutQuad
$ease-out-cubic: cubic-bezier(.215, .61, .355, 1); // http://easings.net/#easeOutCubic
$ease-out-quart: cubic-bezier(.165, .84, .44, 1); // http://easings.net/#easeOutQuart
$ease-out-quint: cubic-bezier(.23, 1, .32, 1); // http://easings.net/#easeOutQuint
$ease-out-sine: cubic-bezier(.39, .575, .565, 1); // http://easings.net/#easeOutSine
$ease-out-expo: cubic-bezier(.19, 1, .22, 1); // http://easings.net/#easeOutExpo
$ease-out-circ: cubic-bezier(.075, .82, .165, 1); // http://easings.net/#easeOutCirc
$ease-out-back: cubic-bezier(.175, .885, .32, 1.275); // http://easings.net/#easeOutBack

$ease-in-out-quad: cubic-bezier(.455, .03, .515, .955); // http://easings.net/#easeInOutQuad
$ease-in-out-cubic: cubic-bezier(.645, .045, .355, 1); // http://easings.net/#easeInOutCubic
$ease-in-out-quart: cubic-bezier(.77, 0, .175, 1); // http://easings.net/#easeInOutQuart
$ease-in-out-quint: cubic-bezier(.86, 0, .07, 1); // http://easings.net/#easeInOutQuint
$ease-in-out-sine: cubic-bezier(.445, .05, .55, .95); // http://easings.net/#easeInOutSine
$ease-in-out-expo: cubic-bezier(0, 0, 0, 1); // http://easings.net/#easeInOutExpo
$ease-in-out-circ: cubic-bezier(.785, .135, .15, .86); // http://easings.net/#easeInOutCirc
$ease-in-out-back: cubic-bezier(.68, -.55, .265, 1.55); // http://easings.net/#easeInOutBack


//== z-index
// $z-menu: 200;
